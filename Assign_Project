Q11) Write a C program to solve the following problem:
Suppose that a disk drive has 5,000 cylinders, numbered 0 to 4999. The drive is currently serving a request at cylinder143, and the previous request was at cylinder 125. The queue of pending requests, in FIFO
order,is:86, 1470, 913, 1774, 948, 1509, 1022, 1750, 130
starting from the current head position, what is the total distance (in cylinders)that the disk arm moves to satisfy all the pending requests for each of the SCAN disk-scheduling algorithms?

Solution: 
#include<iostream>
using namespace std;
class process
{
  public:
  int process_num;
  int burst_time;
  int arrival_time;
  int response_time;
  int waiting_time;
  int turnaround_time;
  int get_at()
  {
    return arrival_time;
  }
  
  
void input_process(int count)
{
  process_num=count+1;
  cout<<"\nENTER BURST TIME OF PROCESS "<<count+1<<" : ";
  cin>>burst_time;
  cout<<"ENTER ARRIVAL TIME OF PROCESS "<<count+1<<" : ";
  cin>>arrival_time;
}
};
void calc_wait_tat(process*,int);
void average(process*,int);
void display(process*,int);
int main()
{
  process temp;
  int num,i,j;
  cout<<"ENTER NUMBER OF PROCESSES : ";
  cin>>num;
  process p[num];
  for(i=0;i<num;++i)
    p[i].input_process(i);
  for(i=0;i<num;++i)
  {
    for(j=i+1;j<num;++j)
    {
      if(p[i].get_at()>p[j].get_at())
      {
        temp=p[i];
        p[i]=p[j];
        p[j]=temp;
      }
    }
  }
  calc_wait_tat(p,num);
  display(p,num);
  return 0;
}
void calc_wait_tat(process *p,int n)
{
  int i;
  p[0].response_time=0;
  for(i=1;i<n;++i)
  {
    p[i].response_time=p[i-1].burst_time+p[i-1].response_time;
    if(p[i].response_time<p[i].arrival_time)
      p[i].response_time=p[i].arrival_time;
  }
  p[0].waiting_time=0;
  for(i=1;i<n;++i)
    p[i].waiting_time=p[i].response_time-p[i].arrival_time;
  for(i=0;i<n;++i)
    p[i].turnaround_time=p[i].waiting_time+p[i].burst_time;
}
void average(process *p,int n)
{
  float avg_wt=0,avg_tat=0;
  for(int i=0;i<n;++i)
  {
    avg_wt+=(float)p[i].waiting_time;
    avg_tat+=(float)p[i].turnaround_time;
  }
  avg_wt/=n;
  avg_tat/=n;
  cout<<"\n\nAVERAGE WAITING TIME : "<<avg_wt;
  cout<<"\nAVERAGE TURN AROUND TIME : "<<avg_tat;
}
void display(process *p,int n)
{
        cout<<"Processes "<<"  Burst time  "<<" Waiting time  "<<" Turn around time\n";
        for (int i=0;i<n;i++)
        {
                cout<<"\n   "<<p[i].process_num<<"\t\t"<<p[i].burst_time<<"\t     "<<p[i].waiting_time<<"\t\t      "<<p[i].turnaround_time;
        }
        average(p,n);
}



Q14) If a teacher is being served at the food mess and during the period when he is being served, another teacher comes, then that 
teacher would get the service (food) next. This process might continue leading to increase in waiting time of students to get food. 
Ensure in your program that the waiting time of students is minimized.

Solution:

#include<iostream>
using namespace std;
 
int main()
{
    int bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_tat;
    cout<<"Enter Total Number of Process:";
    cin>>n;
 
    cout<<"\nEnter Burst Time and Priority\n";
    for(i=0;i<n;i++)
    {
        cout<<"\nP["<<i+1<<"]\n";
        cout<<"Burst Time:";
        cin>>bt[i];
        cout<<"Priority:";
        cin>>pr[i];
        p[i]=i+1;           
    }
 
  
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
                pos=j;
        }
 
        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;
 
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
 
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
 
    wt[0]=0;            
 
 
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
 
        total+=wt[i];
    }
 
    avg_wt=total/n;      
    total=0;
 
    cout<<"\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time";
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];     //calculate turnaround time
        total+=tat[i];
        cout<<"\nP["<<p[i]<<"]\t\t  "<<bt[i]<<"\t\t    "<<wt[i]<<"\t\t\t"<<tat[i];
    }
 
    avg_tat=total/n;     //average turnaround time
    cout<<"\n\nAverage Waiting Time="<<avg_wt;
    cout<<"\nAverage Turnaround Time="<<avg_tat;
 
    return 0;
}
